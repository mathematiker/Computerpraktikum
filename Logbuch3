gap> Q:=Quiver(4,[[1,2,"a"],[2,3,"b"],[3,4,"c"],[4,1,"d"]]);
<quiver with 4 vertices and 4 arrows>
gap> kQ:=PathAlgebra(Rationals,Q);
<Rationals[<quiver with 4 vertices and 4 arrows>]>
gap> relations:=NthPowerOfArrowIdeal(kQ,8);
[ (1)*a*b*c*d*a*b*c*d, (1)*b*c*d*a*b*c*d*a, (1)*c*d*a*b*c*d*a*b, (1)*d*a*b*c*d*a*b*c ]
gap> A := kQ/relations;
<Rationals[<quiver with 4 vertices and 4 arrows>]/
<two-sided ideal in <Rationals[<quiver with 4 vertices and 4 arrows>]>, (4 generators)>>
gap> M:=RightModuleOverPathAlgebra(A,[2,1,1,1],[["a",[[1],[0]]],["b",[[1]]],["c",[[1]]],["d",[[0,1]]]]);
<[ 2, 1, 1, 1 ]>
gap> R:=RadicalOfModule(M);
<[ 1, 1, 1, 1 ]>
gap> R:=RadicalOfModule(M);
<[ 1, 1, 1, 1 ]>
gap> R:=RadicalOfModule(M);
<[ 1, 1, 1, 1 ]>
%Isomorphe Algebren und gezeigt, dass M tatsächlich unzerlegbar
gap> EndOverAlgebra(M);
<algebra-with-one of dimension 2 over Rationals>

-----------------
gap>  Q:=Quiver(4,[[1,2,"a"],[2,3,"b"],[3,4,"c"],[4,1,"d"]]);
<quiver with 4 vertices and 4 arrows>
gap> kQ:=PathAlgebra(Rationals,Q);
<Rationals[<quiver with 4 vertices and 4 arrows>]>
gap>  relations:=NthPowerOfArrowIdeal(kQ,2);
[ (1)*a*b, (1)*b*c, (1)*c*d, (1)*d*a ]
gap> A:=kQ/relations;
<Rationals[<quiver with 4 vertices and 4 arrows>]/
<two-sided ideal in <Rationals[<quiver with 4 vertices and 4 arrows>]>, 
  (4 generators)>>
 sim:=SimpleModules(A);
[ <[ 1, 0, 0, 0 ]>, <[ 0, 1, 0, 0 ]>, <[ 0, 0, 1, 0 ]>, <[ 0, 0, 0, 1 ]> ]

%einfache Module von A (also e_1A/e_1J,...) 

gap> S_1:=sim[1];
<[ 1, 0, 0, 0 ]>
gap> projres:= ProjectiveResolution(S_1);
--- -> 0:(1,1,0,0) -> -1:(1,0,0,0) -> 0

%Projektive Auflösung

gap> P_1:=ObjectOfComplex(projres,1);
<[ 0, 1, 1, 0 ]>
gap> P_2:=ObjectOfComplex(projres,2);
<[ 0, 0, 1, 1 ]>
gap> P_3:=ObjectOfComplex(projres,3);
<[ 1, 0, 0, 1 ]>
gap> P_4:=ObjectOfComplex(projres,4);
<[ 1, 1, 0, 0 ]>
gap> P_5:=ObjectOfComplex(projres,5);
<[ 0, 1, 1, 0 ]>
gap> P_6:=ObjectOfComplex(projres,6);
<[ 0, 0, 1, 1 ]>
gap> P_7:=ObjectOfComplex(projres,7);
<[ 1, 0, 0, 1 ]>

%Zugriff auf verschiedene Stellen der Auflösung

gap> f_0:=DifferentialOfComplex(projres,0);
<<[ 1, 1, 0, 0 ]> ---> <[ 1, 0, 0, 0 ]>>

gap> f_1:=DifferentialOfComplex(projres,1);
<<[ 0, 1, 1, 0 ]> ---> <[ 1, 1, 0, 0 ]>>

gap> f_2:=DifferentialOfComplex(projres,2);
<<[ 0, 0, 1, 1 ]> ---> <[ 0, 1, 1, 0 ]>>

gap> f_3:=DifferentialOfComplex(projres,3);
<<[ 1, 0, 0, 1 ]> ---> <[ 0, 0, 1, 1 ]>>

gap> f_4:=DifferentialOfComplex(projres,4);
<<[ 1, 1, 0, 0 ]> ---> <[ 1, 0, 0, 1 ]>>

gap> f_5:=DifferentialOfComplex(projres,5);
<<[ 0, 1, 1, 0 ]> ---> <[ 1, 1, 0, 0 ]>>

%Zugriff auf Abbildung zwischen P_i und P_(i-1)

gap> Kernel(f_0);
<[ 0, 1, 0, 0 ]>
gap> Kernel(f_1);
<[ 0, 0, 1, 0 ]>
gap> Kernel(f_2);
<[ 0, 0, 0, 1 ]>
gap> Kernel(f_3);
<[ 1, 0, 0, 0 ]>
gap> Kernel(f_4);
<[ 0, 1, 0, 0 ]>

%Kerne der Abbildung --> Periode 4, da Kerne übereinstimmen

