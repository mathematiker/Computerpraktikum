
<!-- saved from url=(0119)https://raw.github.com/mathematiker/Computerpraktikum/43f5e1def333051d5efd37c5f2de8ed729cd4686/C++/prkt/src/methods.cpp -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><style type="text/css"></style></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/*
 * methods.cpp
 *
 *  Created on: 06.11.2013
 *      Author: hofmanms,rehmeml
 */


#include &lt;math.h&gt;
#include &lt;iostream&gt;
#include "MatrixKlassen/matrix.hh"
#include "vektor.hh"
//#include &lt;stdio.h&gt;


//Erstellt die gwünschte M*LxM*L Matrix
//M=Anzahl Blöcke
//L=Größe der Blöcke

Matrix&lt;double&gt; Erstelle(const int&amp; M, const int&amp; L) {
	Matrix&lt;double&gt; A(M*L);
	for (int m=0; m&lt;M;m++)
	{
		A(m*L,m*L)=4;
		A(m*L,m*L+1)=-1; //Ausnahmefälle oben

		A(m*L+L-1,m*L+L-1)=4;
		A(m*L+L-1,m*L+L-2)=-1; //Ausnahmefälle unten

		for (int l=1;l&lt;L-1;l++)
		{
			A(m*L+l,m*L+l-1)=-1;
			A(m*L+l,m*L+l)=4;
			A(m*L+l,m*L+l+1)=-1;
		}
	}
	for (int l=L+1;l&lt;M*L+1;l++)
		A(l-1,l-L-1)=-1;
	for (int l=L+1;l&lt;M*L+1;l++)
		A(l-L-1,l-1)=-1;
	return A;
}

//Erstelle L erstellt die Matrix für den L-Shape
Matrix&lt;double&gt; ErstelleL(const int n){
    int N;
    N=(3*n+2)*n;			//L ist eine NxN Matrix
	Matrix&lt;double&gt;L(N);

	for (int i=0;i&lt;N;i++){
		L(i,i)=4;
	}

	int l1=(2*n+1)*(n-1)-1;
	for (int i=0;i&lt;l1+1;i++){
		L(i,i+2*n+1)=-1;		//oben rechts
		L(i+2*n+1,i)=-1;	//oben links
	}
	for (int i=(2*n+1)*n-n;i&lt;N-n;i++){
		L(i,i+n)=-1;				//unten rechts
		L(i+n,i)=-1;				//unten links
	}

for(int m=0;m&lt;n;m++){
	for(int i=0;i&lt;2*n;i++){
		L(m*(2*n+1)+i,m*(2*n+1)+i+1)=-1;	//T1 rechts
		L(m*(2*n+1)+i+1,m*(2*n+1)+i)=-1;	//T1 links
	}
}

for(int m=0;m&lt;n+2;m++){						//war vorher m&lt;n+2
	for(int i=0;i&lt;n-1;i++){
		L(2*n*n+m*n+i,2*n*n+m*n+i+1)=-1;	//T2 rechts
		L(2*n*n+m*n+i+1,2*n*n+m*n+i)=-1;	//T2 links
	}
}



	return L;
}

double TestG(const int i, const int j, const int n) {
//	double N2=(n+1)*(n+1);
//	return exp(-10*(i*i+j*j)/N2);
	double N=n+1;
	return (i+j)/N;
}

double TestF(const int i, const int j, const int n) {
//	double N2=(n+1)*(n+1);
//	return -40*(10*(i*i+j*j)/N2-1)*exp(-10*((i*i+j*j)/N2));
	return 0;
}
// G erstellt den Vektor g, der Gitterpunktauswertungen an inneren Punkten, der Funktion g = exp(-10 (||x||^2), bei gegebenen MxL Gitter.

Vector   G(int n, const bool mode) {
//	n=(double) n;
	int N;
	if (mode==0) {
		N=n*n;
//	double N2=(n+1)*(n+1);
	Vector g(N);
	double i,j;

	for(i=1; i&lt;=n; i++ ) {
		for(j=1; j&lt;=n; j++) {
			g[i+(j-1)*n-1]=TestG(i,j,n);
		}
	}
	return g;
	}
	else {
		N=(3*n+2)*n;
		Vector g(N);
	for(int j=1; j&lt;=n; j++ ) {
		for(int i=1; i&lt;=2*n+1; i++) {
			g[i+(j-1)*(2*n+1)-1]=TestG(-(n+1)+i,-(n+1)+j,n);
		}
	}
	for(int j=0; j&lt;=n; j++) {
		for(int i=1; i&lt;= n; i++) {
			g[2*n*n+n+i+(j-1)*n]=TestG(i,-(n+1)+ j, n);
		}
	}
	return g;
	}
}

// F erstellt den Vektor f, der Gitterpunktauswertungenan inneren Punkten,der Funktion f=-/\exp(-10(||x||^2) bei gegebenen MxL Gitter.
Vector F(int n, const bool mode) {
	//	n=(double) n;
		int N;
		if (mode==0) {
			N=n*n;
	//	double N2=(n+1)*(n+1);
		Vector f(N);
		double i,j;

		for(i=1; i&lt;=n; i++ ) {
			for(j=1; j&lt;=n; j++) {
				f[i+(j-1)*n-1]=TestF(i,j,n);
			}
		}
		return f;
		}
		else {
			N=(3*n+2)*n;
			Vector f(N);
		for(int i=1; i&lt;=n; i++ ) {
			for(int j=1; j&lt;=2*n+1; j++) {
				f[i+(j-1)*n-1]=TestF(-(n+1)+i,-(n+1)+j,n);
			}
		}
		for(int i=0; i&lt;=n; i++) {
			for(int j=1; j&lt;= n; j++) {
				f[2*n*n+n+i+(j-1)*(n+1)]=TestF(i,-(n+1)+ j, n);
			}
		}
		return f;
		}
}

// B erstellt den Vektor b, der die Randpunktauswertungen von f enthält
Vector B(int n, const bool mode){
//	n= (double) n;
	if (mode==0) {
	int N= n*n;
	double N2= (n+1)*(n+1);
	Vector  b1(N), b2(N), b3(N), b4(N), b(N);
	for(int i=0; i&lt;n; i++) {
			b1[i*n]=TestG(0,i+1,n); //x1=i=0
			b2[i]=TestG(i, 0, n);//x2=j=0
			b3[n-1+i*n]=TestG(n+1, i+1, n);//x1=1 i=n+1
			b4[N-i-1]=TestG(i+1, n+1, n);//x2=1 j=n+1
	}
	return (b1+b2+b3+b4)*N2;
	}
	else {
	int	N=(3*n+2)*n;
	double N2= (n+1)*(n+1);
	Vector b1(N), b2(N), b3(N), b4(N), b5(N), b6(N), b(N);
	for(int i=0; i&lt;n+1; i++) {
		b1[(2*n+1)*n+i*n]=TestG(-(n+1), i, n);
		b6[(2*n+1)*(n-1)+n+i]=TestG(i, 0, n);
		b5[(2*n+1)*n+n-1+i*n]= TestG(0, i, n);
	}
	for(int i=0; i&lt;n; i++) {
		b1[i*(2*n+1)]=TestG(-(n+1), i-n, n);
		b2[2*n+i*(2*n+1)]=TestG(n+1, -(n+1)+i+1, n);
		b4[N-(i+1)]=TestG(-(i+1), n+1, n);
	}
	for(int i=0; i&lt;2*n+1; i++)
		b3[i]=TestG(i-n, -(n+1), n);
	return (b1 + b2 + b3 + b4+b5+b6)*N2;
	}
}

// mult multipliziert eine Matrix und einen Vektor und gibt das Ergebnis zurück
Vector mult(Matrix&lt;double&gt;&amp; A, Vector&amp; arg)
   {
	  int i,j, n;
	  n=arg.dimension();
	  Vector result(n);
	  for (i=0; i&lt;n; i++) {
		  for (j=0; j&lt;n; j++) {
			  result[i]+=A(i,j)*arg[j];
		  }
	  }
	  return result;
   }


//multipliziert die Matrix aus Erstelle mit einem Vektor und gibt das Ergebinis zurück falls mode =0
//multipliziert die Matrix aus ErstelleL mit einem Vektor und gibt das Ergebinis zurück falls mode =1
Vector mult(const int&amp; n, Vector v,const bool mode) {
	if (mode == 0){
	int M=n, L=n;
	int N=(M+1)*(L+1);
	Vector w(M*L);
	for (int m=0; m&lt;M;m++)
	{
		w[m*L]+=4*N*v[m*L];
		w[m*L]+=-N*v[m*L+1]; //Ausnahmefälle oben

		w[m*L+L-1]+=4*N*v[m*L+L-1];
		w[m*L+L-1]+=-N*v[m*L+L-2]; //Ausnahmefälle unten

		for (int l=1;l&lt;L-1;l++)
		{
			w[m*L+l]+=-N*v[m*L+l-1];
			w[m*L+l]+=4*N*v[m*L+l];
			w[m*L+l]+=-N*v[m*L+l+1];
		}
	}
	for (int l=L+1;l&lt;M*L+1;l++)
		w[l-1]+=-N*v[l-L-1];
	for (int l=L+1;l&lt;M*L+1;l++)
		w[l-L-1]+=-N*v[l-1];
	return w;
	}
	//===================================
	else{
	    int N;
	    N=(3*n+2)*n;			//L ist eine NxN Matrix
	    int N2=(n+1)*(n+1);
	    Vector w(N);

		for (int i=0;i&lt;N;i++){
			w[i]+=4*N2*v[i];
		}

		int l1=(2*n+1)*(n-1)-1+n;
		for (int i=0;i&lt;l1+1;i++){
			w[i]+=-N2*v[i+2*n+1];		//oben rechts
			w[i+2*n+1]+=-N2*v[i];	//oben links
		}
		for (int i=(2*n+1)*n;i&lt;N-n;i++){
			w[i]+=-N2*v[i+n];				//unten rechts
			w[i+n]+=-N2*v[i];				//unten links
		}

	for(int m=0;m&lt;n;m++){
		for(int i=0;i&lt;2*n;i++){
			w[m*(2*n+1)+i]+=-N2*v[m*(2*n+1)+i+1];	//T1 rechts
			w[m*(2*n+1)+i+1]+=-N2*v[m*(2*n+1)+i];	//T1 links
		}
		}

	for(int m=1;m&lt;n+2;m++){						//war vorher m&lt;n+2
		for(int i=0;i&lt;n-1;i++){
			w[2*n*n+m*n+i]+=-N2*v[2*n*n+m*n+i+1];	//T2 rechts
			w[2*n*n+m*n+i+1]+=-N2*v[2*n*n+m*n+i];	//T2 links
		}
	}
		return w;
	}
	}

//maximal gibt den betragsgrößten Eintrag eines Vektors zurück
double maximal(Vector v){
	int n=v.dimension();
	double temp;
	temp=fabs(v[0]);
	for (int i=1;i&lt;n;i++){
		if (fabs(v[i])&gt;temp){
			temp=fabs(v[i]);
		}
	}
	return temp;
}

//CG löst das Gleichungssystem Ax=b für gegebenen Vektor b und der Matrix A aus Erstelle nach x auf
Vector CG(int n, Vector&amp; b, bool mode) {
	int N;
	if (mode==0)
		N=n*n;
	else
		N=3*(n+1)*n;
	double tol2=1e-14; //wähle geeignete Toleranz
//	int n=A.size();
	double a=0,beta=0;
	Vector x(N), z(N), r(N), r1(N), d(N), betad(N);

	r=b;
	d=b;
	double qfehler=r*r; //quadratischer Fehler
	double qfehler2; // neuer quadratischer Fehler
	while (qfehler&gt;=tol2)
	{
		z=mult(n,d,mode);
		a=qfehler/(d*z);
		x=x+d*a;
		r1=r+z*(-a);
		qfehler2=r1*r1;
		beta=qfehler2/qfehler;
		d=r1+d*beta;
		r=r1;
		qfehler= qfehler2;
	}
	return x;
}

Vector PoissonDiff(int n, bool mode) {
	int N;
	if (mode==0)
	N=n*n;
	else
	N=(3*n+2)*n;
	Vector g(N), f(N),b(N),o(N),erg(N);
	f=F(n, mode);
	 g=G(n, mode);
	 b=B(n, mode);
	o=f+b;
	erg=CG(n,o, mode);
	return erg;
}


std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Vector&amp; obj)
{
  for (unsigned int i = 0; i &lt; obj.dimension(); ++i) {
      os &lt;&lt; std::setw(5); // field-width
      os &lt;&lt; obj[i] &lt;&lt; " ";
  }
  os &lt;&lt; std::endl;

  return os;
}




</pre></body></html>