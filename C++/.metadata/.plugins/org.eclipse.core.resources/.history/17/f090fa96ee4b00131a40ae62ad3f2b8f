/*
 * methods.cpp
 *
 *  Created on: 06.11.2013
 *      Author: hofmanms
 */

// Definiert ein skalarprodukt für Vektor gleicher Dimension
#include <math.h>
#include <iostream>
#include "MatrixKlassen/matrix.hh"
#include "vektor.hh"


//Erstellt die gwünschte M*LxM*L Matrix
//M=Anzahl Blöcke
//L=Größe der Blöcke
	Matrix<double> Erstelle(const int& M, const int& L) {
Matrix<double> A(M*L);
for (int m=0; m<M;m++)
{
	A(m*L,m*L)=4;
	A(m*L,m*L+1)=-1; //Ausnahmefälle oben


	A(m*L+L-1,m*L+L-1)=4;
	A(m*L+L-1,m*L+L-2)=-1; //Ausnahmefälle unten


	for (int l=1;l<L-1;l++)
	{
		A(m*L+l,m*L+l-1)=-1;
		A(m*L+l,m*L+l)=4;
		A(m*L+l,m*L+l+1)=-1;


	}

}
for (int l=L+1;l<M*L+1;l++)
{
	A(l-1,l-L-1)=-1;
}
for (int l=L+1;l<M*L+1;l++)
{
	A(l-L-1,l-1)=-1;
}
return A;
}
// G erstellt den Vektor g, der Gitterpunktauswertungen, bei gegebenen MxL Gitter.
void G(const int n, std::vector<double> g) {
	int i,j, N; //N ist die Anzahl der inneren Punkte
	N=(n-2)+(n-3)*(n-1);
	// innere Punkte
	for(i=1; i<n-1; i++ ) {
		for(j=1; j<n-1; j++) {
			g[i+(j-1)*(n-1)]=exp(-10*(i*i/((n-1)*(n-1))+j*j/((n-1)*(n-1))));
		}
	}
	// Randpunkte
	for(i=0; i<n; i++) {
		g[N+1+4*i]=exp(-10*(i*i/((n-1)*(n-1))));
		g[N+2+4*i]=exp(-10*(i*i/((n-1)*(n-1))));
		g[N+3+4*i]=exp(-10*(1+i*i/((n-1)*(n-1))));
		g[N+4+4*i]=exp(-10*(1+i*i/((n-1)*(n-1))));
	}
}

// F erstellt den Vektor f, der Gitterpunktauswertungen, bei gegebenen MxL Gitter.
void F(const int n, std::vector<double> f) {
	int i,j, N; //N ist die Anzahl der inneren Punkte
	N=(n-2)+(n-3)*(n-1);
	// innere Punkte
	for(i=1; i<n-1; i++ ) {
		for(j=1; j<n-1; j++) {
			f[i+(j-1)*(n-1)]=(400*i*i/((n-1)*(n-1))+400*j*j/((n-1)*(n-1))-40)*exp(-10*(i*i/((n-1)*(n-1))+j*j/((n-1)*(n-1))));
		}
	}
	// Randpunkte
	for(i=0; i<n; i++) {
		f[N+1+4*i]=(400*i*i/((n-1)*(n-1))-40)*exp(-10*(i*i/((n-1)*(n-1))));
		f[N+2+4*i]=(400*i*i/((n-1)*(n-1))-40)*exp(-10*(i*i/((n-1)*(n-1))));
		f[N+3+4*i]=(360+400*i*i/((n-1)*(n-1)))*exp(-10*(1+i*i/((n-1)*(n-1))));
		f[N+4+4*i]=(360+400*i*i/((n-1)*(n-1)))*exp(-10*(1+i*i/((n-1)*(n-1))));
	}
}
Vector mult(Matrix<double>& A, Vector& arg)
   {
	  int i,j, n;
	  n=arg.dimension();
	  Vector result(n);
	  for (i=0; i<n; i++) {
		  for (j=0; j<n; j++) {
			  result[i]=result[i]+A(i,j)*arg[j];
		  }
	  }
	  return result;
   }
Vector CG(int& M, int& L, Vector& b) {
	double tol=0.01; //wähle geeignete Toleranz
	Matrix<double> A;
	A=Erstelle(M, L);
	int n=M*L;
	double a=0,beta=0;
	Vector x(n), z(n), az(n), r(n), r1(n), d(n), ad(n), betad(n);

	for (int i=0; i<n; i++) {
		x[i]=0;
		z[i]=0;
		az[i]=0;
		r[i]=0;
		r1[i]=0;
		d[i]=0;
		ad[i]=0;
		betad[i]=0;
	}

	r=b;
	d=b;
//	while (r.operator*(r)>=tol)
	for (i=0; i<20; i++)
	{
		z=mult(A,d);
		a=r.operator*(r)/d.operator*(z);
		ad=d.operator*(a);
		x=x.operator+(ad);
		az=z.operator*(-a);
		r1=r.operator+(az);
		beta=r1.operator*(r1)/r.operator*(r);
		betad=d.operator*(beta);
		d=r.operator+(betad);
		r=r1;
	}
	return x;
}




