DeclareOperation("DimE",[IsQuotientOfPathAlgebra]);
InstallMethod(DimE,"irgendwas",
[IsQuotientOfPathAlgebra],0,function(A)
local projres,n, l, M, sim, i, f, PHom, Hom, DimH, DimPH, E;
l:=[];
E:=[0];
i:=1;
n:=0;
if IsSelfinjectiveAlgebra(A)=true then
sim:=SimpleModules(A);
M:=sim[1];
projres:=ProjectiveResolution(M);
while E[i]=0 do
	f:=DifferentialOfComplex(projres,n);
	#K:=Kernel(f);
	Hom:=HomOverAlgebra(Kernel(f),M);
	PHom:=HomFactoringThroughProjOverAlgebra(Kernel(f),M);
	DimH:=Size(Hom);
	DimPH:=Size(PHom);
	Append(E,[DimH-DimPH]);
	i:=i+1;
	n:=n+1;
od;
Unbind(E[1]);
return E;
else
 Print("Keine selbstinjektive Pfadalgebra.");
return(l);
fi;
end);

%Programm, bei dem die Algebra übergeben wird

DeclareOperation("DimE2",[IsPathAlgebraMatModule]);
InstallMethod(DimE2,"irgendwas",
[IsQuotientPathAlgebraMatModule],0,function(M)
local projres,n, l, sim, i, f, PHom, Hom, DimH, DimPH, E;
l:=[];
E:=[0];
i:=1;
n:=0;

projres:=ProjectiveResolution(M);
while E[i]=0 do
	f:=DifferentialOfComplex(projres,n);
	#K:=Kernel(f);
	Hom:=HomOverAlgebra(Kernel(f),M);
	PHom:=HomFactoringThroughProjOverAlgebra(Kernel(f),M);
	DimH:=Size(Hom);
	DimPH:=Size(PHom);
	Append(E,[DimH-DimPH]);
	i:=i+1;
	n:=n+1;
od;
Unbind(E[1]);
return E;
end);

$Programm, bei dem das Modul abgegeben wird






Köcher, die ich ausprobiert habe:

1) Köcher aus Aufgabe 3

gap> Q:=Quiver(4,[[1,2,"a"],[2,3,"b"],[3,4,"c"],[4,1,"d"]]);
<quiver with 4 vertices and 4 arrows>
gap> kQ:=PathAlgebra(Rationals,Q);
<Rationals[<quiver with 4 vertices and 4 arrows>]>
gap>  relations:=NthPowerOfArrowIdeal(kQ,8);
[ (1)*a*b*c*d*a*b*c*d, (1)*b*c*d*a*b*c*d*a, (1)*c*d*a*b*c*d*a*b, 
  (1)*d*a*b*c*d*a*b*c ]
gap>  A := kQ/relations;
<Rationals[<quiver with 4 vertices and 4 arrows>]/
<two-sided ideal in <Rationals[<quiver with 4 vertices and 4 arrows>]>, 
  (4 generators)>>
gap> DimE(A);
[ , 0, 1 ]
gap>  relations:=NthPowerOfArrowIdeal(kQ,2);
[ (1)*a*b, (1)*b*c, (1)*c*d, (1)*d*a ]
gap>  A:=kQ/relations;
<Rationals[<quiver with 4 vertices and 4 arrows>]/
<two-sided ideal in <Rationals[<quiver with 4 vertices and 4 arrows>]>, 
  (4 generators)>>
gap> DimE(A);
[ , 0, 0, 0, 1 ]

2)Köcher aus Skript:

gap> Q:=Quiver(5,[[1,2,"a1"],[2,3,"a2"],[3,4,"a3"],[4,1,"a4"],[1,5,"b1"],[5,1,"b2"]]);
<quiver with 5 vertices and 6 arrows>
gap> kQ:=PathAlgebra(rationals,Q); 
Error, Variable: 'rationals' must have a value
not in any function at line 44 of *stdin*
gap> kQ:=PathAlgebra(Rationals,Q);<Rationals[<quiver with 5 vertices and 6 arrows>]>
gap> I:=[kQ.a4*kQ.a1,kQ.b2*kQ.b1,kQ.a1*kQ.a2*kQ.a3*kQ.a4*kQ.b1*kQ.b2-kQ.b1*kQ.b2*kQ.a1*kQ.a2*kQ.a3*kQ.a4,kQ.a2*kQ.a3*kQ.a4*kQ.b1*kQ.b2*kQ.a1*kQ.a2,kQ.a3*kQ.a4*kQ.b1*kQ.b2*kQ.a1*kQ.a2*kQ.a3];
[ (1)*a4*a1, (1)*b2*b1, (1)*a1*a2*a3*a4*b1*b2+(-1)*b1*b2*a1*a2*a3*a4, 
  (1)*a2*a3*a4*b1*b2*a1*a2, (1)*a3*a4*b1*b2*a1*a2*a3 ]
gap> A:=kQ/I;
<Rationals[<quiver with 5 vertices and 6 arrows>]/
<two-sided ideal in <Rationals[<quiver with 5 vertices and 6 arrows>]>, 
  (7 generators)>>
gap> IsSelfInjectiveAlgebra(A);
Error, Variable: 'IsSelfInjectiveAlgebra' must have a value
not in any function at line 48 of *stdin*
gap> IsSelfinjectiveAlgebra(A);
true
gap> DimE(A);
[ , 0, 1 ]

%Michis cooler Scheiß

Q:=Quiver(7,[ [1,2,"a1"],[2,3,"a2"],[3,4,"a3"],[4,1,"a4"],[1,5,"b1"],[5,6,"b2"],[6,7,"b3"],[7,1,"b4"]]);


gap> relations := [kQ.a4*kQ.a1 , kQ.b4*kQ.b1 , kQ.a1*kQ.a2*kQ.a3*kQ.a4*kQ.b1*kQ.b2*kQ.b3*kQ.b4*kQ.a1*kQ.a2*kQ.a3*kQ.a4*kQ.b1*kQ.b2*kQ.b3*kQ.b4 - kQ.b1*kQ.b2*kQ.b3*kQ.b4*kQ.a1*kQ.a2*kQ.a3*kQ.a4*kQ.b1*kQ.b2*kQ.b3*kQ.b4*kQ.a1*kQ.a2*kQ.a3*kQ.a4 , kQ.a2*kQ.a3*kQ.a4*kQ.b1*kQ.b2*kQ.b3*kQ.b4*kQ.a1*kQ.a2*kQ.a3*kQ.a4*kQ.b1*kQ.b2*kQ.b3*kQ.b4*kQ.a1*kQ.a2 , kQ.b2*kQ.b3*kQ.b4*kQ.a1*kQ.a2*kQ.a3*kQ.a4*kQ.b1*kQ.b2*kQ.b3*kQ.b4*kQ.a1*kQ.a2*kQ.a3*kQ.a4*kQ.b1*kQ.b2 , kQ.a3*kQ.a4*kQ.b1*kQ.b2*kQ.b3*kQ.b4*kQ.a1*kQ.a2*kQ.a3*kQ.a4*kQ.b1*kQ.b2*kQ.b3*kQ.b4*kQ.a1*kQ.a2*kQ.a3 , kQ.b3*kQ.b4*kQ.a1*kQ.a2*kQ.a3*kQ.a4*kQ.b1*kQ.b2*kQ.b3*kQ.b4*kQ.a1*kQ.a2*kQ.a3*kQ.a4*kQ.b1*kQ.b2*kQ.b3];
[ (1)*a4*a1, (1)*b4*b1, (1)*a1*a2*a3*a4*b1*b2*b3*b4*a1*a2*a3*a4*b1*b2*b3*b4+(
    -1)*b1*b2*b3*b4*a1*a2*a3*a4*b1*b2*b3*b4*a1*a2*a3*a4, 
  (1)*a2*a3*a4*b1*b2*b3*b4*a1*a2*a3*a4*b1*b2*b3*b4*a1*a2, 
  (1)*b2*b3*b4*a1*a2*a3*a4*b1*b2*b3*b4*a1*a2*a3*a4*b1*b2, 
  (1)*a3*a4*b1*b2*b3*b4*a1*a2*a3*a4*b1*b2*b3*b4*a1*a2*a3, 
  (1)*b3*b4*a1*a2*a3*a4*b1*b2*b3*b4*a1*a2*a3*a4*b1*b2*b3 ]
gap> A := kQ/relations;
<Rationals[<quiver with 7 vertices and 8 arrows>]/
<two-sided ideal in <Rationals[<quiver with 7 vertices and 8 arrows>]>, 
  (9 generators)>>
gap> IsSelfinjectiveAlgebra(A);true
gap> DimE7(A);[ , 0, 1 ]
gap> 



